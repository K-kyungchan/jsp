model1 : 요청을 jsp가 접수, 응답도 jsp에서 생성
		 비지니스 로직이(model)이 jsp(view)안에서 호출됨
		 만약 다른 jsp(view)에서도 동일한 비지니스 로직(model)을 사용할 경우
		 비지니스 로직의 변경시 많은 코드 수정이 동반된다 ==> 유지보수의 어려움

model2 : 요청을 servlet이 접수 , 응답은 jsp에서 응답
		 model1과 다르게 모델, 뷰 , 컨트롤러가 분리되어있음
		 그러므로 유지보수가 쉽다


MVC 패턴 : Model - View - Controller
		  각 역할을 담당하는 객체를 분리
		  controller : 요청을 접수 비지니스 로직을 호출 및 저장(scope)
		  Model : 비지니스 로직 처리
		  View : 화면 출력을 담당
		  
		  model1과 다르게 viwe와 model을 분리
		  view에서 필요한 데이터는 scope객체를 통해 받는다
		  
Front Controller : 모든 요청을 하나의 객체가 접수 받는 형태
				   장점 : ??

EL(표현언어)		   
표현식을 보다 쉽고 간결하게 사용할 수 있는 표현방법

서버 프로그램 개발 
	표준 태그 라이브러리
	JSPL	
		  